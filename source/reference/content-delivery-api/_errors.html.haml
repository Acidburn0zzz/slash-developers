= title_anchor 'h2', "errors", "Errors"

:markdown
  The API has a set of well-defined errors that it responds with if something didn't work out:

  - `404 Not Found`: The requested resource or endpoint could not be found.
  - `400 Bad Request`: The request was malformed or missing a parameter.
  - `403 Acess Denied`: The client is not allowed to perform the requested action.
  - `401 Unauthorized`: The client did not send an access token as authorization.
  - `500 Server Error`: Something went wrong on our end.

- # TODO: make the above a table?

= language_specific 'javascript', 'http' do

  %h3 Error Fields

  :markdown
    Field       |Type  |Description
    ------------|------|--------------------------------------
    sys.type    |String|Always "Error".
    sys.id      |String|ID of error (one from the list above).
    details     |Object|Details, depending on the error's ID.

    You should always handle errors according to their sys.id instead of their HTTP status code.
    Future errors might be added which map to existing status codes but have different meanings.

= language_specific 'objc', 'swift' do

  :markdown
    All errors are encapsulated as `NSError` instances in the Objective-C SDK. The `code` property will hold the HTTP status code and a message which can be shown to the user will be available as `localizedDescription`. If you need to perform further error handling, the `userInfo` dictionary contains all error details under the key "details" and the sys.id under the key "identifier".

    You should always handle errors according to their sys.id instead of their HTTP status code.
    Future errors might be added which map to existing status codes but have different meanings.


= language_specific 'ruby' do
  %h3 Ratelimit

  :markdown
    The library does not make assumptions on the rate limit but reacts to `HTTP 429` by returning an error object.
    You should handle this within your code and either do the delay calculation naive (fixed amount of seconds) or more elaborated (exponential increase) depending by the structure of your code.
