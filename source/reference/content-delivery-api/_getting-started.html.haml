= title_anchor 'h2', 'getting-started', 'Getting Started'

= language_specific 'javascript' do
  .note
    :markdown
      Note: Please open your browser's JavaScript console now.
      You can try all JavaScript code snippets in there
      (How to open the JavaScript console in
      [Google Chrome](https://developers.google.com/chrome-developer-tools/docs/console#opening_the_console) and
      [other browsers](http://webmasters.stackexchange.com/questions/8525/how-to-open-the-javascript-console-in-different-browsers))!

  :markdown
    Let's start by setting up the Contentful JavaScript library and getting some content
    out of an example Space. This guide contains many example code snippets
    which you can copy paste into your JavaScript console, like this one:

  = language_block :javascript do
    :plain
      console.log('Bacontentful!');

  :markdown
    Important: How to open the JavaScript console in
    [Google Chrome](https://developers.google.com/chrome-developer-tools/docs/console#opening_the_console)  and
    [other browsers](http://webmasters.stackexchange.com/questions/8525/how-to-open-the-javascript-console-in-different-browsers).

= language_specific 'http' do
  :markdown
    The examples make use of the `curl` command, so you can follow along by copy-pasting them into your terminal:

  = language_block :shell do
    curl -X #{space_req()}

= language_specific 'ruby' do
  .note
    :markdown
      Note: All of the following examples can be used within an Interactive Ruby session ([IRB](http://www.ruby-doc.org/stdlib-2.0/libdoc/irb/rdoc/IRB.html)).


= language_specific 'javascript', 'objc', 'java' do
  = title_anchor 'h3', 'setup', 'Setting up the Library'


= language_specific 'javascript' do

  :markdown
    Open your browser's JavaScript console on this page and access the library
    as `contentful`. Try it now!

  = language_block :javascript do
    :plain
      contentful
      // → Object {...}

  :markdown
    It's easy to install the JavaScript library in your project:

    - Download latest [contentful.min.js](https://raw.github.com/contentful/contentful.js/master/dist/contentful.min.js)

    It is however strongly encouraged to use a package manager like npm or bower to stay up to date with the latest compatible version.
    Use one of these popular package managers to install:

    - [contentful](http://npmjs.org/package/contentful) on [npm](http://npmjs.org):

          npm install contentful

    - contentful on [bower](http://bower.io):

          bower install contentful

      After installing, add this as a script tag:

          <script src="components/contentful/dist/contentful.min.js"></script>

    The JS client's repository is [contentful/contentful.js](https://github.com/contentful/contentful.js) on github.

    In summary, here are three documented ways to interact with our API:

    - Using `client` in your browser's console on this page. This is the recommended way for following along.
    - Setting up your own `client` by installing `contentful` from npm.
      See [Authentication](#authentication) for setting up your own client.
    - Using `curl -X #{space_req()}#...`

= language_specific 'objc', 'swift' do

  :markdown
    [CocoaPods](http://www.cocoapods.org) is a dependency manager for Objective-C, which automates and simplifies the process of using 3rd-party libraries like the Contentful Delivery API in your projects.

        platform :ios, '7.0'
        pod 'ContentfulDeliveryAPI'

    This is the easiest way to keep your copy of the Contentful Delivery API updated. If you want to integrate it in another way, the [README](https://github.com/contentful/contentful.objc/blob/master/README.md) has you covered.

= language_specific 'swift' do

  :markdown
    When using Swift, you either need to create a [bridging header](https://medium.com/@stigi/swift-cocoapods-da09d8ba6dd2) or integrate the SDK manually as a [framework](https://github.com/neonichu/ContentfulDeliveryAPIFramework).

= language_specific 'ruby' do
  :markdown
    To use the contentful RubyGem in your project add it to your Gemfile and install the bundle:

         gem 'contentful'
         bundle install

= language_specific 'java' do
  :markdown
    To use the contentful Java SDK in your project simply grab via Maven:

  = language_block :xml do
    :plain
      <dependency>
        <groupId>com.contentful.java</groupId>
        <artifactId>java-sdk</artifactId>
        <version>VERSION</version>
      </dependency>

  :markdown
    or Gradle:

  = language_block :groovy do
    :plain
      compile 'com.contentful.java:java-sdk:VERSION'

  :markdown
    You can check the latest version number [on GitHub](https://github.com/contentful/contentful.java).

= title_anchor 'h3', 'hello-content', 'Hello Content'

:markdown
  We've created a Space and an API key with some example content.

= language_specific 'java', 'javascript', 'objc', 'swift' do
  :markdown
    We'll be using this pre-configured client throughout this document:

= code_examples do
  = language_block :java do
    :plain
      CDAClient client = new CDAClient.Builder()
          .setSpaceKey("cfexampleapi")
          .setAccessToken("b4c0n73n7fu1")
          .build();

  = language_block :javascript do
    :plain
      client
      // → Client {...}
  = language_block :objc do
    :plain
      CDAClient* client = [CDAClient new];
  = language_block :swift do
    :plain
      var client = CDAClient()
  = language_block :ruby do
    :plain
      require 'contentful'
      client = Contentful::Client.new(
        access_token: 'b4c0n73n7fu1',
        space: 'cfexampleapi'
      )

:markdown
  Let's request some data from the example Space:

= code_examples do
  = language_block :java do
    :plain
      client.fetchEntryWithIdentifier("nyancat", new CDACallback<CDAEntry>() {
        @Override
        protected void onSuccess(CDAEntry entry, Response response) {
          System.out.println(entry.getFields().entrySet().toString());
        }
      });

  = language_block :javascript do
    :plain
      client.entry('nyancat').then(log.ok, log.fail);
  = language_block :shell do
    :plain
      curl -X #{space_req('/entries/nyancat')}

  = api_console_trigger :action => 'entry', :placeholders => {':entry' => 'nyancat'}

  = language_block :objc do
    :plain
       [client fetchEntryWithIdentifier:@"nyancat"
                                success:^(CDAResponse *response, CDAEntry *entry) {
                                  NSLog(@"%@", entry.fields);
                                }
                                failure:^(CDAResponse *response, NSError *error) {
                                  NSLog(@"%@", error);
                                }];

  = language_block :swift do
    :plain
      client.fetchEntryWithIdentifier("nyancat",
          success: { (response: CDAResponse!, entry: CDAEntry!) -> Void in
            println(entry.fields.allKeys)
          },
          failure: { (response: CDAResponse!, error: NSError!) -> Void in 
            println(error) 
          })

  = language_block :ruby do
    :plain
      client.entry 'nyancat'

:markdown
  You should see something like this (sans some properties for brevity):

= language_specific 'java' do
  :markdown
        [
          name=Nyan Cat, 
          likes=[rainbows, fish], 
          color=rainbow, 
          birthday=2011-04-04T22:00:00+00:00, 
          lives=1337.0, 
        ]

= language_specific 'javascript', 'http' do
  = language_block :json do
    :plain
      {
        "sys": {
          "type": "Entry",
          "id": "nyancat"
        },
        "fields": {
          "name": "Nyan Cat"
        }
      }

= language_specific 'objc', 'swift' do
  = language_block :objc do
    :plain
      {
        birthday = "2011-04-04 22:00:00 +0000";
        color = rainbow;
        likes =     (
            rainbows,
            fish
        );
        lives = 1337;
        name = "Nyan Cat";
      }

= language_specific 'ruby' do
  = language_block :ruby do
    :plain
        #<Contentful::Entry:
        @fields={
            :name=>"Nyan Cat",
            :likes=>["rainbows", "fish"],
            :color=>"rainbow",
            :bestFriend=>#<Contentful::Link: @sys={:type=>"Link", :linkType=>"Entry", :id=>"happycat"}>,
            :birthday=>"2011-04-04T22:00:00+00:00",
            :lives=>1337
        }>


:markdown
  We've just retrieved our first piece of data and logged it to the console!
  Creators of cat picture websites rejoice!

= title_anchor 'h3', 'whats-next', "What's next"

:markdown
  In the following sections you'll learn about a few high-level concepts.
  We'll go through using all endpoints and you'll learn how they work in detail.

:markdown
  Most topics have example snippets that you can copy, paste and execute to inspect the results.

= language_specific 'javascript' do
  :markdown
    You are encouraged to follow along in your brower's JavaScript console.

:markdown
  We hope you enjoy the interactive way of learning about the API.

= language_specific 'java', 'javascript', 'objc', 'swift' do
  = title_anchor 'h3', 'example-apps', 'Example Apps'

= language_specific 'java' do
  :markdown
    The Discovery application for Android which uses the Java SDK can be found in the [discovery-app-android repository](https://github.com/contentful/discovery-app-android).

    Another (more straightforward) example is our Coffee Guide application for Android which can be found in the [guide-app-android repository](https://github.com/contentful/guide-app-android).

= language_specific 'javascript' do
  :markdown
    There are a few
    [example apps](http://contentful.github.io/contentful.js/example/)
    in the
    [contentful.js repository](https://github.com/contentful/contentful.js).
    The example apps use the contentful.js library to get data from the Content Delivery API and show it in different ways.

    You can clone the contentful.js repo to try the examples locally.

= language_specific 'objc', 'swift' do
  :markdown
    There are a few example apps in the
    [contentful.objc repository](https://github.com/contentful/contentful.objc).
    The example apps use the contentful.objc library to get data from the Content Delivery API and show it in different ways.

    You can clone the contentful.objc repo to try the examples locally.

= language_specific 'ruby' do
  :markdown
    A collection of examples is also available on [Github](https://github.com/contentful/contentful.rb/tree/master/examples).
    A sample application using the Contentful RubyGem and Sinatra can also be found in the [Github repository](https://github.com/contentful/sinatra-blog)
