# Group Editing Interface

Editing interfaces represent the look and feel of Content Type fields in the UI. They are tightly
coupled to a specific Content Type and define which Widget has to be rendered for the Content Type's
fields.

__Example__

Let's consider the following Content Type which describes a typical blog post kind of data structure.
It has a title, a body and a category that can be either "General", "iOS" or "Android".

```
{
  "fields": [
    { "id": "title", "name": "Title", "type": "Symbol" },
    { "id": "body", "name": "Body", "type": "Text" },
    {
      "id": "category", "name": "Category", "type": "Symbol",
      "validations": [{ "in": ["General", "iOS", "Android"] }]
    }
  ]
}
```

An Editing Interface can for example define that the `title` field should be rendered as a normal
input field (the respective widget's id is `singleLine`). Furthermore it can define that the `body`
should be a normal textarea (= `multipleLine`) and also that the `category` should be rendered as a
dropdown field (= `dropdown`).

The Editing Interface would look like this:

```
{
  "controls": [
    { "fieldId": "title", "widgetId": "singleLine" },
    { "fieldId": "body", "widgetId": "multipleLine" },
    { "fieldId": "category", "widgetId": "dropdown" }
  ]
}
```

Please note that there are specific sets of applicable Widgets per Content Type field type:

| Widget ID               | Applicable field types        | Description               |
|-------------------------|-------------------------------|---------------------------|
| assetLinkEditor         | Asset                         | Search, attach, and preview an asset. |
| assetLinksEditor        | Asset (Array)                 | Search, attach, reorder, and preview multiple assets. |
| assetGalleryEditor      | Asset (Array)                 | Search, attach, reorder, and preview multiple assets in a gallery layout |
| boolean                 | Boolean                       | Radio buttons with customizable labels. |
| datePicker              | Date                          | Select date, time, and timezon. |
| entryLinkEditor         | Entry                         | Search and attach another entry.
| entryLinksEditor        | Entry (Array)                 | Search and attach multiple entries. |
| entryCardEditor         | Entry                         | Search, attach, and preview another entry. |
| entryCardsEditor        | Entry (Array)                 | Search, attach, and preview multiple entries. |
| numberEditor            | Integer, Number               | A simple input for numbers. |
| rating                  | Integer, Number               | Uses stars to select a number. |
| locationEditor          | Location                      | A map to select or find coordinates from an address. |
| objectEditor            | Object                        | A code editor for JSON |
| urlEditor               | Symbol                        | A text input that also shows a preview of the given URL. |
| slugEditor              | Symbol                        | Automatically generates a slug and validates its uniqueness across entries. |
| ooyalaEditor            | Symbol                        | Search and select a video hosted by [Ooyala][] |
| kalturaEditor           | Symbol                        | Search and select a video hosted by [Kaltura][] |
| kalturaMultiVideoEditor | Symbol (Array)                | Search and select multiple videos hosted by [Kaltura][] |
| listInput               | Symbol (Array)                | Text input that splits values on `,` and stores them as an array. |
| multipleLine            | Text                          | A simple `<textarea>` input |
| markdown                | Text                          | A full fleged [markdown editor][] |
| singleLine              | Text, Symbol                  | A simple text input field |
| dropdown                | Text, Symbol, Integer, Number | A `<input type="select">` element. It uses the values from an `in` validation on the content type field as options. |
| radio                   | Text, Symbol, Integer, Number | A group of radio buttons. One for each value from the `in` validation on the content type field |

[Kaltura]: https://www.contentful.com/ecosystem/kaltura/
[Ooyala]: https://www.contentful.com/ecosystem/ooyala/
[markdown editor]: https://www.contentful.com/r/knowledgebase/markdown/

__Settings__

A control may have custom settings that are passed to the widget to change its behavior or presentation.

The control entry for a field of type `Boolean`, for example, could look like this.
```
{
  "fieldId": "isFeatured",
  "widgetId": "boolean",
  "settings": {
    "helpText": "Should the post be featured on the homepage?",
    "trueLabel": "absolutely",
    "falseLabel": "rather not",
  }
}
```

If present, the `settings` object of a control must be an object. All widgets
accept the `helpText` setting and use it to render additional information with
the widget. Other settings are widget specific.

<table>
<thead>
  <tr>
    <th>Widget ID</th>
    <th>Property Name</th>
    <th>Description</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td rowspan="2">boolean</td>
    <td><code>trueLabel</code></td>
    <td>Shows this text next to the radio button that sets this value to `true`. Defaults to “Yes”.</td>
  </tr>
  <tr>
    <td><code>falseLabel</code></td>
    <td>Shows this text next to the radio button that sets this value to `false`. Defaults to “No”.</td>
  </tr>
  <tr>
    <td>rating</td>
    <td><code>stars</code></td>
    <td>Number of stars to select from. Defaults to 5.</td>
  </tr>
  <tr>
    <td rowspan="2">datePicker</td>
    <td><code>format</code></td>
    <td>One of “dateonly”, “time”, “timeZ” (default). Specifies whether to show the clock and/or timezone inputs.</td>
  </tr>
  <tr>
    <td><code>ampm</code></td>
    <td>Specifies which type of clock to use. Must be one of the stringss “12” or “24” (default).</td>
  </tr>
</tbody>
</table>


## Editing Interface [/spaces/{space_id}/content_types/{content_type_id}/editor_interfaces/{editor_interface_id}]

While it is theoretically possible to create more than one Editing Interface
(by using different IDs) the UI will only ever read and use the Editing Interface with the ID `default`.

__Limitations__

Since Editing Interfaces are describing Content Type fields, they are tightly coupled to the Content Type field's IDs. Please note
that there is currently no automatic synchronization in the API between a Content Type and an Editing Interface. This means that an
Editing Interface might get out of sync when you rename a Content Type's field. In that case you will have to file an update of the
respective Editing Interface as well.

+ Parameters
    + space_id: fp91oelsziea (required, string) - ID of the Space in form of a string
    + content_type_id: hfM9RCJIk0wIm06WkEOQY (required, string) - ID of the Content Type in form of a string
    + editor_interface_id: default (required, string) -  ID of the Editor Interface in form of a string

### Create/Update an Editing Interface [PUT]

This endpoint can be used to create a new Editing Interface with an ID specified by the user, or to update a specific Editing Interface via its ID.

Note that when updating an existing Editing Interface, you always need to specify the last version you got of the Editing Interface you are updating with `X-Contentful-Version`.

+ Request Create new Editing Interface with a predefined identifier
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json

    + Attributes (Editing Interface)

+ Response 201 (application/vnd.contentful.management.v1+json)

    + Attributes (Complete Editing Interface)

### Get a single Editing Interface [GET]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Complete Editing Interface)
