= title_anchor 'h2', "links", "Links"

:markdown
  Links represent relationships between Resources, for example:

  - A restaurant linking to its menu (singular relationship)
  - A menu linking to its specific menu items (plural relationship)
  - Each menu item linking to a photo (attachment)
  - A restaurant linking to multiple photos (multiple attachments)

  When using links to
  [model relationships between Entries](#links-modeling-relationships)
  and
  [model attachments](#links-modeling-attachments)
  you benefit from many great features:

  - Relationships are clearly defined and validated by special
  [Content Type Fields](#links-content-type-fields)
  - Entry Links can be validated by Content Type.
  E.g.: Only allow Menu Items for `fields.menuItems`.
  - Asset Links can be validated by File Type.
  E.g.: Only allow Images for `fields.photo`.
  - The [Content Delivery API](/developers/documentation/content-delivery-api/)
  is highly optimized for Links:
  A _single_ HTTP request let's you retrieve an entire web of linked Resources:
  A restaurant with its menu, all menu items  and all of their attachments -
  everything in the example above. A mobile app could immediately display
  something, if not everything, after a single request.
  This is very important for mobile apps where latency is a big issue:
  Instead of doing hundreds of requests, do a single request which can also
  be cached by Contentful's CDN to speed up future requests even more.
  Learn
  [how to resolve a web of Links in the Content Delivery API](/developers/documentation/content-delivery-api/#search-link).

= title_anchor 'h3', "links-modeling-relationships", "Modeling Relationships"

:markdown
  Linking an Entry to another Entry represents a relationship.

  For example, here's a restaurant pointing to its menu:

= language_block :json do
  :plain
    {
      "sys": {
        "type": "Entry",
        "id": "il-doges"
      },
      "fields": {
        "menu": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "il-doges-nice-menu"
            }
          }
        }
      }
    }

:markdown
  _il-doges' `fields.menu` links to il-doges-nice-menu._

  It's possible to create circular links:
  You could model a circular chain of Entries to model a dialog in a video game
  or more complex graphs. There are many possibilities, it's up to you to decide!

  Various fields in every Resource's `sys` are also Links: The Space they're in,
  their Content Type (in case of Entries) or Users who created or modified them.

  Of course, an Entry can also link to more than one Entry or Asset:

  - Have multiple Link Fields, e.g. `fields.menu` and `fields.openingHours`
  in the restaurant. These represent semantically different Links because of the
  name & type of the Field they're stored in.
  You can even limit the Entries a Link Field may point to by specifying a
  Link Content Type Validation on the Field.
  - Have an Array of Links Field, e.g. `fields.menuItems` in the restaurant's
  menu. This represents an (orderable) list of related items. Often you may want
  to model nothing but an ordered list: In this case, simply create a
  Content Type with a single Field that links to Entries.

-# TODO: = title_anchor 'h4', "links-modeling-relationships-example", "Example Content Model"

= title_anchor 'h3', "links-modeling-attachments", "Modeling Attachments"

:markdown
  Entries linking to Assets represent attachments.

  For example, here's a restaurant pointing to some photos:

= language_block :json do
  :plain
    {
      "sys": {
        "type": "Entry",
        "id": "il-doges"
      },
      "fields": {
        "mainPhoto": {"en-US":
          {"sys": {"type": "Link", "linkType": "Asset", "id": "such-doge"}
        },
        "photos": {"en-US": [
          {"sys": {"type": "Link", "linkType": "Asset", "id": "nice-food"}},
          {"sys": {"type": "Link", "linkType": "Asset", "id": "such-doge"}},
          {"sys": {"type": "Link", "linkType": "Asset", "id": "wow"}}
        ]}
      }
    }

:markdown
  _il-doges' `fields.mainPhoto` links to such-doge, `fields.photos` link to more
  photos, including the mainPhoto._

  Just as with Entry links you can have multiple Fields linking to a
  single (`fields.mainPhoto`) or multiple (`fields.photos`) Assets.

  You can limit the type of Asset a Link Field can link to by specifying an
  Asset File Type Validation on the Field.

= title_anchor 'h3', "links-content-type-fields", "Link Fields in Content Types"

:markdown

  Adding Links to an Entry requires the Entry's Content Type to have
  one or more Link Fields.

  Let's look at some example Field values.
  Remember that these need to be used in context of a Content Type like this:

= language_block :json do
  :plain
    {
      "sys": {"type": "ContentType", "id": "restaurant"},
      "fields": [
        ...
      ]
    }

= title_anchor 'h4', "links-content-type-fields-entry", "Link Field for Entry"

= language_block :json do
  :plain
    {
      "id": "menu",
      "type": "Link",
      "linkType": "Entry"
    }

= title_anchor 'h4', "links-content-type-fields-entries", "Link Field for multiple Entries"

= language_block :json do
  :plain
    {
      "id": "menuItems",
      "type": "Array",
      "items": {
        "type": "Link",
        "linkType": "Entry"
      }
    }

= title_anchor 'h4', "links-content-type-fields-asset", "Link Field for Asset"

= language_block :json do
  :plain
    {
      "id": "mainPhoto",
      "type": "Link",
      "linkType": "Asset"
    }

= title_anchor 'h4', "links-content-type-fields-assets", "Link Field for multiple Assets"

= language_block :json do
  :plain
    {
      "id": "photos",
      "type": "Array",
      "items": {
        "type": "Link",
        "linkType": "Asset"
      }
    }

= title_anchor 'h3', "links-values", "Link values in Entries"

:markdown
  Link values are used in Entries to specify actual Links to other
  Entries or Assets. Before you can add those links you need to have
  [added Link Fields to a Content Type](#links-content-type-fields).

  Link values are represented as objects containing a sys property with the
  type and ID of the resource they're linking to:

  Field       |Type  |Description
  ------------|------|------------------------
  sys.type    |String|Always "Link".
  sys.linkType|String|Type of linked Resource.
  sys.id      |String|ID of linked Resource.

  Let's look at some example Link values.
  Remember that these need to be used in context of an Entry like this:

= language_block :json do
  :plain
    {
      "sys": {"type": "Entry", "id": "restaurant"},
      "fields": {
        "someField": {
          "en-US": ...
        }
      }
    }

= title_anchor 'h4', "links-values-entry", "Link to an Entry"

= language_block :json do
  :plain
    {
      "sys": {
        "type": "Link",
        "linkType": "Entry",
        "id": "il-doges-nice-menu"
      }
    }

= title_anchor 'h4', "links-values-entries", "Links to multiple Entries"

= language_block :json do
  :plain
    [
      {"sys": {"type": "Link", "linkType": "Entry", "id": "nice-burger"}},
      {"sys": {"type": "Link", "linkType": "Entry", "id": "such-dessert"}},
      {"sys": {"type": "Link", "linkType": "Entry", "id": "WOW"}}
    ]

= title_anchor 'h4', "links-values-asset", "Link to an Asset"

= language_block :json do
  :plain
    {
      "sys": {
        "type": "Link",
        "linkType": "Asset",
        "id": "such-doge"
      }
    }

= title_anchor 'h4', "links-values-assets", "Links to multiple Assets"

= language_block :json do
  :plain
    [
      {"sys": {"type": "Link", "linkType": "Entry", "id": "nice-food"}},
      {"sys": {"type": "Link", "linkType": "Entry", "id": "such-doge"}},
      {"sys": {"type": "Link", "linkType": "Entry", "id": "wow"}}
    ]
