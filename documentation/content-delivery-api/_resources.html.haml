:markdown
  The API follows REST principles and provides entities as resources.
  All resources have descriptive URLs that speak for themselves.

= language_specific 'http' do

  :markdown
    For example, the Space with the ID "#{space}" has this URI:

        #{public_api_host}/spaces/#{space}

    And within this Space, an Entry with the ID "nyancat" has this URI:

        #{public_api_host}/spaces/#{space}/entries/nyancat

    You'll be seeing these and other URIs in HTTP snippets throughout this document.

= prefixed_partial 'system-properties'

= title_anchor 'h2', "spaces", "Spaces"

:markdown
  Spaces are containers for Content Types, Entries and Assets.
  API consumers, like mobile apps or websites, typically fetch data by
  getting Entries and Assets from one or more Spaces.

= title_anchor 'h3', "getting-space", "Getting a Space"

= code_examples do
  = language_block :java do
    :plain
      client.spaces().async().fetch(new CDACallback<CDASpace>() {
        @Override protected void onSuccess(CDASpace result) {
          System.out.println(String.format(
              "name=%s\ndefaultLocale=%s\nlocales=%s",
              result.getName(),
              result.getDefaultLocale(),
              result.getLocales().toString()));
        }
      });
  = language_block :javascript do
    :plain
      client.space().then(log.ok, log.fail);
  = language_block :shell do
    = curl path: "/spaces/#{space}"
  = language_block :objc do
    :plain
      [client fetchSpaceWithSuccess:^(CDAResponse* response, CDASpace* space) {
        NSLog(@"sys = %@\nlocales = %@", space.sys, space.locales);
        [NSApp terminate:nil];
      } failure:^(CDAResponse *response, NSError *error) {
        NSLog(@"Error: %@", error);
        [NSApp terminate:nil];
      }];
  = language_block :swift do
    :plain
      client.fetchSpaceWithSuccess({ (response: CDAResponse!, space: CDASpace!) -> Void in
          NSLog("sys = %@\nlocales = %@", space.sys, space.locales)
      }, failure: { (response: CDAResponse!, error: NSError!) -> Void in
          println(error)
      })
  = language_block :ruby do
    :plain
      client.space
%h4 Response

= language_specific 'java' do
  :markdown
        name=Contentful Example API
        defaultLocale=en-US
        locales=[
          Locale{code='en-US', isDefault=true, name='English'}, 
          Locale{code='tlh', isDefault=false, name='Klingon'}
        ]

= language_specific 'javascript', 'http' do

  = language_block :json do
    :plain
      {
        "sys": {
          "type": "Space",
          "id": "cfexampleapi"
        },
        "name": "Contentful Example API",
        "locales": [
          {"code": "en-US", "name": "English"},
          {"code": "tlh", "name": "Klingon"}
        ]
      }

= language_specific 'objc', 'swift' do

  = language_block :objc do
    :plain
      sys = {
        id = cfexampleapi;
        type = Space;
      }
      locales = (
        {
          code = "en-US";
          name = English;
        },
        {
          code = tlh;
          name = Klingon;
        }
      )

= title_anchor 'h3', "space-fields", "Space Fields"

= language_specific 'ruby' do
  = language_block :ruby do
    :plain
      #<Contentful::Space:
      @properties=
        {
          :name=>"Contentful Example API",
          :locales=>
            [
              #<Contentful::Locale:
                @properties={
                  :code=>"en-US",
                  :name=>"English"}>,
              #<Contentful::Locale:
                @properties={
                  :code=>"tlh",
                  :name=>"Klingon"}>
            ]
        }
        @sys={
          :type=>"Space",
          :id=>"cfexampleapi"}>


:markdown
  Field       |Type        |Description
  ------------|------------|----------------------------------------------------------
  sys         |Sys         |See [common system properties](#system-properties).
  name        |String      |Name of the Space.
  locales     |\[Locale\]  |List of Locales.

  A Locale is a language in which content is available in within one specific Space. See [Localization](#i18n).

  Field       |Type        |Description        | Example
  ------------|------------|-------------------|---------
  code        |String      |Code of the Locale.|"en-US"
  name        |String      |Name of the Locale.|"English"

= title_anchor 'h2', "content-types", "Content Types"

:markdown
  Content Types are schemas describing the shape of Entries.
  They mainly consist of a list of fields acting as a blueprint for Entries.

  Note: They're not related to the HTTP Content-Type header.

- # TODO: add examples for common Content Types (e.g. blog post, category, recipe). Already quickly explain the difference to entries

= title_anchor 'h3', "getting-content-type", "Getting a Content Type"

:markdown
  Get a Content Type with the ID "cat".

= code_examples do
  = language_block :java do
    :plain
      client.contentTypes().async().fetchOne("cat", new CDACallback<CDAContentType>() {
        @Override protected void onSuccess(CDAContentType result) {
          System.out.println(String.format(
              "name=%s\nfields=%s",
              result.getName(),
              result.getFields().toString()));
        }
      });
  = language_block :javascript do
    :plain
      client.contentType('cat').then(log.ok, log.fail);
  = language_block :shell do
    = curl path: "/spaces/#{space}/content_types/cat"
  = language_block :objc do
    :plain
      [client fetchContentTypeWithIdentifier:@"cat" success:^(CDAResponse* r, CDAContentType* ct) {
        NSLog(@"%@\nfields: %@", ct, ct.fields);
      } failure:^(CDAResponse *response, NSError *error) {
        NSLog(@"Error: %@", error);
      }];
  = language_block :swift do
    :plain
      client.fetchContentTypeWithIdentifier("cat",
      success: { (response: CDAResponse!, ct: CDAContentType!) -> Void in
          NSLog("%@\nfields: %@", ct, ct.fields)
      }, failure: { (response: CDAResponse!, error: NSError!) -> Void in
          println(error)
      })
  = language_block :ruby do
    :plain
       client.content_type('cat')

:markdown
  Response (sans some properties):

= language_specific 'java' do
  :markdown
        name=Cat
        fields=[
          {id=name, name=Name, type=Text, required=true, localized=true}, 
          {id=likes, name=Likes, type=Array, required=false, localized=false, items={type=Symbol}}, 
          {id=color, name=Color, type=Symbol, required=false, localized=false}, 
          {id=bestFriend, name=Best Friend, type=Link, required=false, localized=false, linkType=Entry},
          {id=birthday, name=Birthday, type=Date, required=false, localized=false}, 
          {id=lives, name=Lives left, type=Integer, required=false, localized=false}, 
          {id=image, name=Image, required=false, localized=false, type=Link, linkType=Asset}
        ]

= language_specific 'javascript', 'http' do
  = language_block :json do
    :plain
      {
        "sys": {
          "type": "ContentType",
          "id": "cat"
        },
        "name": "Cat",
        "description": "Meow.",
        "fields": [
          {"id": "name", "name": "Name", "type": "Text"},
          {"id": "diary", "name": "Diary", "type": "Text"},
          {"id": "likes", "name": "Likes", "type": "Array", "items": {"type": "Symbol"}},
          {"id": "bestFriend", "name": "Best Friend", "type": "Link"},
          {"id": "lifes", "name": "Lifes left", "type": "Integer"}
        ]
      }

= language_specific 'objc', 'swift' do

  = language_block :objc do
    :plain
      CDAContentType Cat with 8 fields
      fields: (
        "CDAField bestFriend of type Link",
        "CDAField birthday of type Date",
        "CDAField color of type Symbol",
        "CDAField image of type Link",
        "CDAField lifes of type Integer",
        "CDAField likes of type Array",
        "CDAField lives of type Integer",
        "CDAField name of type Text"
      )

= language_specific 'ruby' do
  = language_block :ruby do
    :plain
      #<Contentful::ContentType:
        @properties={
          :name=>"Cat", :description=>"Meow.",
          :fields=>
            [
              #<Contentful::Field: @properties={:id=>"name", :name=>"Name", :type=>"Text"}>,
              #<Contentful::Field: @properties={:id=>"likes", :name=>"Likes", :type=>"Array", :items=>#<Contentful::Field: @properties={:id=>"", :name=>"", :type=>"Symbol"}>}>,
              #<Contentful::Field: @properties={:id=>"color", :name=>"Color", :type=>"Symbol"}>,
              #<Contentful::Field: @properties={:id=>"bestFriend", :name=>"Best Friend", :type=>"Link"}>,
              #<Contentful::Field: @properties={:id=>"birthday", :name=>"Birthday", :type=>"Date"}>,
              #<Contentful::Field: @properties={:id=>"lifes", :name=>"Lifes left", :type=>"Integer"}>,
              #<Contentful::Field: @properties={:id=>"lives", :name=>"Lives left", :type=>"Integer"}>,
              #<Contentful::Field: @properties={:id=>"image", :name=>"Image", :type=>"Link"}>
            ],
          :displayField=>"name"}>

= title_anchor 'h3', "searching-content-types", "Searching Content Types"

:markdown
  Search Content Types in a space.

= code_examples do
  = language_block :javascript do
    :plain
      client.contentTypes().then(log.ok, log.fail);
  = language_block :shell do
    = curl path: "/spaces/#{space}/content_types"
  = language_block :objc do
    :plain
      [client fetchContentTypesWithSuccess:^(CDAResponse *response, CDAArray *array) {
        NSLog(@"%@", array);
      } failure:^(CDAResponse *response, NSError *error) {
        NSLog(@"Error: %@", error);
      }];
  = language_block :swift do
    :plain
      client.fetchContentTypesWithSuccess(
        { (response: CDAResponse!, array: CDAArray!) -> Void in
          println(array.items)
        }, failure: { (response: CDAResponse!, error: NSError!) -> Void in
          println(error)
        })
  = language_block :ruby do
    :plain
      client.content_types
:markdown
  The response is an [Array](#arrays) of Content Types (sans some properties):

= language_specific 'javascript', 'http' do

  = language_block :json do
    :plain
      {
        "sys": {
          "type": "Array"
        },
        "total": 4,
        "skip": 0,
        "limit": 100,
        "items": [...]
      }

= language_specific 'objc', 'swift' do

  = language_block :objc do
    :plain
      (
        "CDAContentType Cat with 8 fields",
        "CDAContentType Dog with 3 fields",
        "CDAContentType Human with 4 fields",
        "CDAContentType City with 2 fields"
      )


= language_specific 'ruby' do
  = language_block :ruby do
    :plain
      #<Contentful::Array:
      @properties=
      {
        :total=>4,
        :limit=>100,
        :skip=>0,
        :items=>[..]
      }>

:markdown
  See [Search Parameters](#search) to learn how to search for specific things.

= title_anchor 'h3', "content-type-fields", "Content Type Fields"

:markdown
  Field       |Type        |Description
  ------------|------------|----------------------------------------------------------
  sys         |Sys         |See [common system properties](#system-properties).
  name        |String      |Name of the Content Type.
  description |String      |Description of the Content Type.
  fields      |\[Field\]   |List of Fields.
  displayField|String      |ID of main Field used for display.

:markdown
  A Field describes a single property of an Entry:

  Field      |Type          |Description
  -----------|--------------|-------------------------------------------
  id         |String        |ID of the Field.
  name       |String        |Name of the Field.
  type       |String        |Type of the Field.
  items      |Schema        |(Array type only) Schema for items.
  required   |Boolean       |Describes whether the Field is mandatory.
  localized  |Boolean       |Describes whether the Field is localized.

  Field types:

  Name   |JSON Primitive|Description
  -------|--------------|------------------------------------------------------------------------------
  Symbol |String        |Basic list of characters. Maximum length is 256.
  Text   |String        |Same as Symbol, but can be filtered via [Full-Text Search](#search-filter-full-text). Maximum length is 50,000.
  Integer|Number        |Number type without decimals. Values from  -2^53 to 2^53.
  Number |Number        |Number type with decimals.
  Date   |String        |See [Date & Time Format](#date-time-format).
  Boolean|Boolean       |Flag, `true` or `false`.
  Link   |Object        |See [Links](#links)
  Array  |Array         |List of values. Value type depends on `field.items.type`.
  Object |Object        |Arbitrary Object.

= language_specific 'objc', 'swift' do

  :markdown

    Field type are modelled as an enumeration in the Objective-C SDK:

    Value                  |Objective-C value type
    -----------------------|-------------------------------------------
    CDAFieldTypeArray      |NSArray
    CDAFieldTypeBoolean    |NSNumber
    CDAFieldTypeDate       |NSDate
    CDAFieldTypeInteger    |NSNumber
    CDAFieldTypeLink       |CDAResource
    CDAFieldTypeLocation   |NSData with CLLocationCoordinate2D struct
    CDAFieldTypeNumber     |NSNumber
    CDAFieldTypeSymbol     |NSString
    CDAFieldTypeText       |NSString


= title_anchor 'h2', "entries", "Entries"

:markdown
  Entries represent textual content in a Space.
  An Entry's data adheres to a certain Content Type.

- # TODO: Quickly explain difference to Content Types again. Have some examples (e.g. a specific recipe). People easily confuse the two concepts.

= title_anchor 'h3', "getting-entry", "Getting an Entry"

:markdown
  Get an Entry with an ID of "nyancat".

= code_examples do
  = language_block :java do
    :plain
      client.entries().async().fetchOne("nyancat", new CDACallback<CDAEntry>() {
        @Override protected void onSuccess(CDAEntry result) {
          System.out.println(result.getFields().entrySet().toString());
        }
      });
  = language_block :javascript do
    :plain
      client.entry('nyancat').then(log.ok, log.fail);
  = language_block :shell do
    = curl path: "/spaces/#{space}/entries/nyancat"
  = language_block :objc do
    :plain
      [client fetchEntryWithIdentifier:@"nyancat" success:^(CDAResponse *response, CDAEntry *entry) {
        NSLog(@"%@", entry.fields);
      } failure:^(CDAResponse *response, NSError *error) {
        NSLog(@"Error: %@", error);
      }];

  = language_block :swift do
    :plain
      client.fetchEntryWithIdentifier("nyancat",
        success: { (response: CDAResponse!, entry: CDAEntry!) -> Void in
          println(entry.fields.allKeys)
        }, failure: { (response: CDAResponse!, error: NSError!) -> Void in
          println(error)
        })

  = language_block :ruby do
    :plain
      client.entry('nyancat')

:markdown
  Response (sans some properties):

= language_specific 'java' do
  :markdown
        [
          name=Nyan Cat, 
          likes=[rainbows, fish], 
          color=rainbow, 
          bestFriend={sys={type=Link, linkType=Entry, id=happycat}}, 
          birthday=2011-04-04T22:00:00+00:00, 
          lives=1337.0, 
          image={sys={type=Link, linkType=Asset, id=nyancat}}
        ]

= language_specific 'javascript', 'http' do

  = language_block :json do
    :plain
      {
        "sys": {
          "type": "Entry",
          "id": "cat",
          "space": {"sys": {"type": "Link", "linkType": "Space", "id": "example"}},
          "contentType": {"sys": {"type": "Link", "linkType": "ContentType", "id": "cat"}},
          "createdAt": "2013-03-26T00:13:37.123Z",
          "updatedAt": "2013-03-26T00:13:37.123Z",
          "revision": 1
        },
        "fields": {
          "name": "Nyan cat",
          "color": "Rainbow",
          "nyan": true,
          "birthday": "2011-04-02T00:00:00.000Z",
          "diary": "Nyan cat has an epic rainbow trail.",
          "likes": ["rainbows", "fish"],
          "bestFriend": {"type": "Link", "linkType": "Entry", "id": "happycat"}
        }
      }

= language_specific 'objc', 'swift' do

  = language_block :objc do
    :plain
      {
        bestFriend = "CDAEntry happycat with fields:{\n    bestFriend = \"CDAEntry nyancat with fields:(null)\";\n    birthday = \"2003-10-28 23:00:00 +0000\";\n    color = gray;\n    image = \"CDAAsset of type (null) at URL (null)\";\n    likes =     (\n        cheezburger\n    );\n    lives = 1;\n    name = \"Happy Cat\";\n}";
        birthday = "2011-04-04 22:00:00 +0000";
        color = rainbow;
        image = "CDAAsset of type image/png at URL https://images.contentful.com/cfexampleapi/4gp6taAwW4CmSgumq2ekUm/9da0cd1936871b8d72343e895a00d611/Nyan_cat_250px_frame.png";
        likes =     (
          rainbows,
          fish
        );
        lives = 1337;
        name = "Nyan Cat";
      }

= title_anchor 'h3', "searching-entries", "Searching Entries"

= language_specific 'ruby' do
  = language_block :ruby do
    :plain
        #<Contentful::Entry:
        @fields={
            :name=>"Nyan Cat",
            :likes=>["rainbows", "fish"],
            :color=>"rainbow",
            :bestFriend=>#<Contentful::Link: @sys={:type=>"Link", :linkType=>"Entry", :id=>"happycat"}>,
            :birthday=>"2011-04-04T22:00:00+00:00",
            :lives=>1337
        }>


:markdown
  Search Entries in a space.

= code_examples do
  = language_block :java do
    :plain
      client.entries().async().fetchAll(new CDACallback<CDAArray>() {
        @Override protected void onSuccess(CDAArray result) {
          System.out.println(String.format("total: %d\nskip: %d\nlimit: %d",
              result.getTotal(),
              result.getSkip(),
              result.getLimit()));
        }
      });
  = language_block :javascript do
    :plain
      client.entries().then(log.ok, log.fail);
  = language_block :shell do
    = curl path: "/spaces/#{space}/entries"
  = language_block :objc do
    :plain
      [client fetchEntriesWithSuccess:^(CDAResponse *response, CDAArray *array) {
        NSLog(@"total: %d\nskip: %d\nlimit: %d", array.total, array.skip, array.limit);
      } failure:^(CDAResponse *response, NSError *error) {
        NSLog(@"%@", error);
      }];
  = language_block :swift do
    :plain
      client.fetchEntriesWithSuccess(
        { (response: CDAResponse!, array: CDAArray!) -> Void in
          NSLog("total: %d\nskip: %d\nlimit: %d", array.total, array.skip, array.limit)
        }, failure: { (response: CDAResponse!, error: NSError!) -> Void in
          println(error)
        })
  = language_block :ruby do
    :plain
      client.entries

:markdown
  The response is an [Array](#arrays) of Entries (sans some properties):

= language_specific 'java' do
  :markdown
        total: 11
        skip: 0
        limit: 100  

= language_specific 'javascript', 'http' do

  = language_block :json do
    :plain
      {
        "sys": {
          "type": "Array"
        },
        "total": 2,
        "skip": 0,
        "limit": 100,
        "items": [...]
      }

= language_specific 'objc', 'swift' do

  = language_block :objc do
    :plain
      total: 10
      skip: 0
      limit: 100

= language_specific 'ruby' do

  = language_block :ruby do
    :plain
      #<Contentful::Array:
        @properties=
        {
          :total=>10,
          :limit=>100,
          :skip=>0,
          :items=>[..]
        }
        @sys={:type=>"Array"}>
.note
  :markdown
    When querying Entries by `fields` you need to specify a Content Type by
    setting the [content_type parameter](#search-content-type) to the ID of the
    Content Type you want to filter by.

:markdown
  See [Search Parameters](#search) to learn how to search for specific things.

= title_anchor 'h3', "entry-fields", "Entry Fields"

:markdown
  Field          |Type          |Description
  ---------------|--------------|--------------------------------------------
  sys            |Sys           |See [system properties](#system-properties).
  sys.contentType|Link          |Link to the Entry's Content Type
  fields         |Object        |Properties according to Content Type

= title_anchor 'h2', "assets", "Assets"

:markdown
  Assets represent files in a Space. An asset can be any kind of file:
  an image, a video, an audio file, a PDF or any other filetype.
  Assets are usually attached to Entries through [Links](#links).

  Assets can optionally be localized by providing separate files for each locale.
  Those Assets which are not localized simply provide a single file under the default locale.

  When querying the Content Delivery API for Entries which contain Links to Assets
  then all Assets will be [included by default](#assets-included).

  [Resize image assets](#image-asset-resizing) on the fly by supplying the
  desired dimensions as query parameters.

= title_anchor 'h3', "assets-included", "Assets included by default"

:markdown
  When [searching Entries](#searching-entries) which contain Links to Assets the linked Assets
  will be included in the response by default.


= title_anchor 'h3', "image-asset-resizing", "Image Asset resizing"

:markdown
  Instead of chosing image dimensions in Content Management you can specify the dimensions of
  images during delivery.

  Images are hosted on `images.contentful.com`. For files on this host you can attach
  the URI query parameters `w` and/or `h` to specify the desired dimensions. The image will
  never be stretched, skewed or enlarged. Instead it will be fit into the bounding box given by the
  `w` and `h` parameters.

  Additionaly, a `q` can be passed to define the JPEG compression quality between 1 and 100 and
  the `fm` parameter can be used to change the format to either "png" or "jpg".

-# TODO: put the parameters in a table
-# TODO put real image url and actual image here with examples of different dimensions

= code_examples do
  = language_block :shell, :javascript do
    :plain
      http://images.contentful.com/4gp6taAwW4CmSgumq2ekUm/9da0cd1936871b8d72343e895a00d611/Nyan_cat_250px_frame.png?w=100&fm=jpg&q=50
  = language_block :objc do
    :plain
      [asset imageURLWithSize:CGSizeMake(300.0, 200.0)];
      [asset imageURLWithSize:CGSizeMake(300.0, 200.0)
                      quality:100
                       format:CDAImageFormatJPEG];
  = language_block :swift do
    :plain
      asset.imageURLWithSize(CGSize(width:300.0, height:200.0))
      asset.imageURLWithSize(CGSize(width:300.0, height:200.0), 
          quality:100, format:CDAImageFormat.JPEG)
  = language_block :ruby do
    :plain
      client.asset('happycat').image_url(width: 300, height: 200, format: 'jpg', quality: 100)

= title_anchor 'h3', "getting-asset", "Getting an Asset"

:markdown
  Get Asset with ID "nyancat".

= code_examples do
  = language_block :java do
    :plain
      client.assets().async().fetchOne("nyancat", new CDACallback<CDAAsset>() {
        @Override protected void onSuccess(CDAAsset result) {
          System.out.println(String.format(
              "url=%s\nmimeType=%s",
              result.getUrl(),
              result.getMimeType()));
        }
      });
  = language_block :javascript do
    :plain
      client.asset('nyancat').then(log.ok, log.fail);
  = language_block :shell do
    = curl path: "/spaces/#{space}/assets/nyancat"
  = language_block :objc do
    :plain
      [client fetchAssetWithIdentifier:@"nyancat" success:^(CDAResponse *response, CDAAsset *asset) {
        NSLog(@"%@", asset);
      } failure:^(CDAResponse *response, NSError *error) {
        NSLog(@"%@", error);
      }];
  = language_block :swift do
    :plain
      client.fetchAssetWithIdentifier("nyancat",
        success: { (response: CDAResponse!, asset : CDAAsset!) -> Void in
          println(asset)
        }, failure: { (response: CDAResponse!, error: NSError!) -> Void in
          println(error)
        })
  = language_block :ruby do
    :plain
      client.asset('nyancat')

:markdown
  Response (sans some properties):

= language_specific 'java' do
  :markdown
        url=https://images.contentful.com/.../Nyan_cat_250px_frame.png
        mimeType=image/png

= language_specific 'javascript', 'http' do

  = language_block :json do
    :plain
      {
        "sys": {
          "type": "Asset",
          "id": "nyancat",
          "space": {"sys": {"type": "Link", "linkType": "Space", "id": "example"}},
          "createdAt": "2013-03-26T00:13:37.123Z",
          "updatedAt": "2013-03-26T00:13:37.123Z",
          "revision": 1
        },
        "fields": {
          "title": "Nyan cat",
          "description": "A typical picture of Nyancat including the famous rainbow trail.",
          "file": {
            "fileName": "nyancat.png",
            "contentType": "image/png",
            "details": {
              "image": {
                "width": 250,
                "height": 250
              },
              "size": 12273
            },
            "url": "//images.contentful.com/cfexampleapi/4gp6taAwW4CmSgumq2ekUm/9da0cd1936871b8d72343e895a00d611/Nyan_cat_250px_frame.png"
          }
        }
      }

= language_specific 'objc', 'swift' do

  = language_block :objc do
    :plain
      CDAAsset of type image/png at URL https://images.contentful.com/cfexampleapi/4gp6taAwW4CmSgumq2ekUm/9da0cd1936871b8d72343e895a00d611/Nyan_cat_250px_frame.png

= language_specific 'ruby' do
  = language_block :ruby do
    :plain
      #<Contentful::Asset:
      @fields=
      {:title=>"Nyan Cat",
      :file=>
        #<Contentful::File:
        @properties=
        {:fileName=>"Nyan_cat_250px_frame.png",
         :contentType=>"image/png",
         :details=>
           {"image"=>{"width"=>250, "height"=>250}, "size"=>12273},
             :url=>"//images.contentful.com/cfexampleapi/4gp6taAwW4CmSgumq2ekUm/9da0cd1936871b8d72343e895a00d611/Nyan_cat_250px_frame.png"}}>


= title_anchor 'h3', "searching-assets", "Searching Assets"

:markdown
  Search Assets in a space.

= code_examples do
  = language_block :java do
    :plain
      client.assets().async().fetchAll(new CDACallback<CDAArray>() {
        @Override protected void onSuccess(CDAArray result) {
          for (CDAResource res : result.getItems()) {
            CDAAsset asset = (CDAAsset) res;
            System.out.println(String.format(
                "url=%s, mimeType=%s", 
                asset.getUrl(), 
                asset.getMimeType()));
          }
        }
      });
  = language_block :javascript do
    :plain
      client.assets().then(log.ok, log.fail);
  = language_block :shell do
    = curl path: "/spaces/#{space}/assets"
  = language_block :objc do
    :plain
      [client fetchAssetsWithSuccess:^(CDAResponse *response, CDAArray *array) {
        NSLog(@"%@", array);
      } failure:^(CDAResponse *response, NSError *error) {
        NSLog(@"%@", error);
      }];
  = language_block :swift do
    :plain
      client.fetchAssetsWithSuccess(
        { (response: CDAResponse!, array: CDAArray!) -> Void in
          println(array.items)
        }, failure: { (response: CDAResponse!, error: NSError!) -> Void in
          println(error)
        })

  = language_block :ruby do
    :plain
      client.assets

:markdown
  The response is an [Array](#arrays) of Assets (sans some properties):

= language_specific 'java' do
  :markdown
        url=https://images.contentful.com/cfexampleapi/.../jake.png, mimeType=image/png
        url=https://images.contentful.com/cfexampleapi/.../Nyan_cat_250px_frame.png, mimeType=image/png
        url=https://images.contentful.com/cfexampleapi/.../happycatw.jpg, mimeType=image/jpeg
        url=https://images.contentful.com/cfexampleapi/.../doge.jpg, mimeType=image/jpeg

= language_specific 'javascript', 'http' do

  = language_block :json do
    :plain
      {
        "sys": {
          "type": "Array"
        },
        "total": 2,
        "skip": 0,
        "limit": 100,
        "items": [...]
      }

= language_specific 'objc', 'swift' do

  = language_block :objc do
    :plain
      (
        "CDAAsset of type image/jpeg at URL https://images.contentful.com/cfexampleapi/3MZPnjZTIskAIIkuuosCss/382a48dfa2cb16c47aa2c72f7b23bf09/happycatw.jpg",
        "CDAAsset of type image/png at URL https://images.contentful.com/cfexampleapi/4gp6taAwW4CmSgumq2ekUm/9da0cd1936871b8d72343e895a00d611/Nyan_cat_250px_frame.png",
        "CDAAsset of type image/png at URL https://images.contentful.com/cfexampleapi/4hlteQAXS8iS0YCMU6QMWg/2a4d826144f014109364ccf5c891d2dd/jake.png",
        "CDAAsset of type image/jpeg at URL https://images.contentful.com/cfexampleapi/1x0xpXu4pSGS4OukSyWGUK/cc1239c6385428ef26f4180190532818/doge.jpg"
      )

= language_specific 'ruby' do

  = language_block :ruby do
    :plain
      #<Contentful::Array:
        @properties=
        {
          :total=>4,
          :limit=>100,
          :skip=>0,
          :items=>[..]
        }
      }>

:markdown
  See [Search Parameters](#search) to learn how to search for specific things.

= title_anchor 'h3', "asset-fields", "Asset Fields"

:markdown
  Field                           |Type          |Description
  --------------------------------|--------------|------------------------------------------------
  sys                             |Sys           |See [system properties](#system-properties).
  fields.title                    |Text          |Title of the Asset.
  fields.description              |Text          |Description of the Asset.
  fields.file                     |File          |File(s) of the Asset.
  fields.file.fileName            |Symbol        |Original filename of the file.
  fields.file.contentType         |Symbol        |Content type of the file.
  fields.file.url                 |Symbol        |URL of the file.
  fields.file.details             |Object        |Details of the file, depending on its mime type.
  fields.file.details.size        |Number        |Size (in bytes) of the file.

= title_anchor 'h2', "arrays", "Arrays"

:markdown
  Search results are represented as Arrays.

  Field          |Type          |Description
  ---------------|--------------|--------------------------------------------
  sys            |Sys           |See [system properties](#system-properties).
  total          |Number        |Total number of resources matching the search parameters.
  limit          |Number        |Requested limit parameter.
  skip           |Number        |Requested skip parameter.

- # TODO: document the maximum value for limit?
