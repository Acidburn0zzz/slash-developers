:markdown
  There are many types of things which we call Resources: Spaces, Content Types, Entries, Assets, etc.
  Regardless of which type of Resource you are interacting with, there are some rules that apply to all of them.
  For example, when updating the name of a Space you need to specify its previous version just as when updating fields inside an Entry.

= prefixed_partial 'system-properties'

= title_anchor 'h2', "resources-urls", "Resource URLs"

:markdown
  The API follows REST principles and therefore provides Spaces, Entries and other entities as resources.
  All resources have descriptive URLs that speak for themselves.

  For example, the Space with the ID "#{space}" has this URI:

      #{subdomain_url('api', "/spaces/#{space}")}

  And within this Space, an Entry with the ID "nyancat" has this URI:

      #{subdomain_url('api', "/spaces/#{space}/entries/nyancat")}

  You'll be seeing these and other URIs in HTTP snippets throught this document.

= title_anchor 'h2', "resources-ids", "Resource IDs"

:markdown
  When creating a resource you may either chose an ID or let the server generate a random ID for you.

  When choosing an ID yourself it must adhere to the following rules:

  - Length must be between 1 and 64 characters
  - May consist of alphanumeric characters, minus "-", underscore "_" and period "."

  In terms of a regular expression: `/^[a-zA-Z0-9-_.]{1,64}$/`.

  Note that you can not choose an ID when creating a Space.
  For Spaces you may only use the POST method and let the server generate a random ID for you.

= language_specific 'http' do
  :markdown
    Choose an ID by doing a PUT request to the resource's URI:

= language_specific 'javascript' do
  :markdown
    Choose an ID by specifying it in sys:

= code_examples do
  = language_block :javascript do
    :plain
      space.createEntry('blog-post', {
        sys: {id: 'bar'},
        ...
      }).then(log.ok, log.fail);
  = language_block :shell do
    = curl :method => 'PUT',
           :path => '/spaces/SPACE/entries/bar',
           :headers => {'X-Contentful-Content-Type' => 'baz'},
           :data => {fields: {name: {'en-US' => 'bar'}}}

= language_specific 'http' do
  :markdown
    Let the server generate a random ID by doing a POST request to the appropriate endpoint:

= language_specific 'javascript' do
  :markdown
    Let the server generate a random ID by not specifying one:

= code_examples do
  = language_block :javascript do
    :plain
      space.createEntry('blog-post', {
        ...
      }).then(log.ok, log.fail);
  = language_block :shell do
    = curl :method => 'POST',
           :path => '/spaces/SPACE/entries',
           :headers => {'X-Contentful-Content-Type' => 'baz'},
           :data => {fields: {name: {'en-US' => 'bar'}}}

:markdown
  Note that resource IDs are unique within their respective Space and their type:

  For example, you could have two Spaces which both have an Entry with ID = "foobar".
  But you could not have two Entries with ID = "foobar" within the same Space.

  Resource IDs are also unique per type:
  While the example before explained you can't have two Entries with the same ID,
  you could have an Entry with ID = "foobar" and a Content Type with ID = "foobar".

= title_anchor 'h2', "resources-updating-resources", "Updating Resources"

:markdown
  When updating an existing resource don't only pass the changes you made;
  Instead pass the entire resource _including_ the changes you've made.
  In other words: Do not pass a subset of properties and expect some kind of merge to occur.
  If you update with only a subset of properties all existing properties which are not part of that update will be gone.

  To summarize, resources should always be updated like this:

  - Fetch current resource
  - Make changes to current resource
  - Update resource by passing changed resource along with current version number

  This way no unseen changes are ever overridden and unexpected conflicts are unlikely to occur.

= title_anchor 'h2', "resources-updating-version-locking", "Updating & Version Locking"

:markdown
  Contentful uses optimistic locking.
  When updating an existing resource its previous version needs to be specified.
  The version is compared with the resource's current version on the server to ensure that a client doesn't overwrite a resource that has since been updated.
  If the version changed in between the update will be rejected.

= language_specific 'http' do
  Pass the previous version as the `X-Contentful-Version` header:

  = language_block :shell do
    = curl method:  'PUT',
           path:    '/spaces/SPACE',
           version: 23,
           data:    {name: 'Hyper Space'}

= language_specific 'javascript', 'objc' do
  :markdown
    If you are using one of the client libraries, the library should take care of this for you. Check the [HTTP docs](/developers/documentation/content-management-api/http/#resources-updating-version-locking) for more details.

= title_anchor 'h2', "resources-publishing", "Publishing"

:markdown
  Publishing a Content Type or an Entry makes it available to the [Content Delivery API](/developers/documentation/content-delivery-api/).

  When publishing you need to send along the current version number, just like when [updating the resource](#resources-updating-version-locking) itself.

= title_anchor 'h2', "resources-spaces", "Spaces"

:markdown
  Spaces are containers for Content Types, Entries and Assets and other resources.
  API consumers, like mobile apps or websites, typically fetch data by
  getting Entries and Assets from one or more Spaces.

= title_anchor 'h3', "resources-spaces-create", "Creating a Space"

= prefixed_partial 'snippets/spaces-create'

= title_anchor 'h3', "resources-spaces-list", "Listing Spaces"

= prefixed_partial 'snippets/spaces-list'

= title_anchor 'h3', "resources-spaces-get", "Getting a Space"

= prefixed_partial 'snippets/spaces-get'

= title_anchor 'h3', "resources-spaces-update", "Updating a Space"

= prefixed_partial 'snippets/spaces-update'

= title_anchor 'h3', "resources-spaces-delete", "Deleting a Space"

= prefixed_partial 'snippets/spaces-delete'

= title_anchor 'h3', "resources-spaces-fields", "Space Fields"

:markdown
  Field       |Type        |Description
  ------------|------------|----------------------------------------------------------
  sys         |Sys         |See [common system properties](#system-properties).
  name        |String      |Name of the Space.

  See [Localization](#i18n) for Space locales in the Content Management API.

  Field       |Type        |Description        | Example
  ------------|------------|-------------------|---------
  code        |String      |Code of the Locale.|"en-US"
  name        |String      |Name of the Locale.|"English"

= title_anchor 'h2', "resources-content-types", "Content Types"

:markdown
  Content Types are schemas describing the shape of Entries.
  They mainly consist of a list of fields acting as a blueprint for Entries.

  For example, let's say we want to publish blog post articles.
  First thing we have to do is define a Content Type which describes those blog posts.
  A simple Content Type with title and body fields would look like this (`sys` left out intentionally):

= language_block :json do
  :plain
    {
      "name": "Blog Post",
      "displayField": "title",
      "fields": [
        {
          "id": "title",
          "name": "Title",
          "type": "Text",
          "required": true,
          "localized": true
        },
        {
          "id": "body",
          "name": "Body",
          "type": "Text",
          "required": true,
          "localized": true
        }
      ]
    }

:markdown
  Entries for this Content Type must have a title and a text field because of `required: true`.
  Also `localized: true` tells us that both fields can be localized. The `displayField` property
  specifies the field that should be used as the title of an entry when the entry is displayed in
  a list. [See below](#resources-entries) for an Entry that fits this Content type.

  Note: Content Types are not related to the HTTP Content-Type header.

- # TODO: add examples for common Content Types (e.g. blog post, category, recipe). Already quickly explain the difference to entries

= title_anchor 'h3', "resources-content-types-create", "Creating a Content Type"

= prefixed_partial 'snippets/content-types-create'

= title_anchor 'h3', "resources-content-types-list", "Listing Content Types"

= prefixed_partial 'snippets/content-types-list'

= title_anchor 'h3', "resources-content-types-get", "Getting a Content Type"

= prefixed_partial 'snippets/content-types-get'

= title_anchor 'h3', "resources-content-types-update", "Updating a Content Type"

= prefixed_partial 'snippets/content-types-update'

= title_anchor 'h3', "resources-content-types-activate", "Activating a Content Type"

= prefixed_partial 'snippets/content-types-activate'

= title_anchor 'h3', "resources-content-types-deactivate", "Deactivating a Content Type"

= prefixed_partial 'snippets/content-types-deactivate'

= title_anchor 'h3', "resources-content-types-delete", "Deleting a Content Type"

= prefixed_partial 'snippets/content-types-delete'

= title_anchor 'h3', "resources-content-types-validations", "Content Type Validations"

= prefixed_partial 'snippets/content-types-validations'

= title_anchor 'h3', "resources-content-types-fields", "Content Type Fields"

:markdown
  Field       |Type        |Description
  ------------|------------|----------------------------------------------------------
  sys         |Sys         |See [common system properties](#system-properties).
  name        |String      |Name of the Content Type.
  description |String      |Description of the Content Type.
  fields      |\[Field\]   |List of Fields.
  displayField|String      |ID of main Field used for display.

:markdown
  A Field describes a single property of an Entry:

  Field      |Type          |Description
  -----------|--------------|-------------------------------------------
  id         |String        |ID of the Field.
  name       |String        |Name of the Field.
  type       |String        |Type of the Field.
  items      |Schema        |(Array type only) Schema for items.
  required   |Boolean       |Describes whether the Field is mandatory.
  localized  |Boolean       |Describes whether the Field is localized.
  validations|Array         |Specifies which validations are applied to the value in the field.

  Field types:

  Name   |JSON Primitive|Description
  -------|--------------|------------------------------------------------------------------------------
  Symbol |String        |Basic list of characters. Maximum length is 256.
  Text   |String        |Same as Symbol, but can be filtered via [Full-Text Search](#search-filter-full-text). Maximum length is 50,000.
  Integer|Number        |Number type without decimals. Values from  -2^53 to 2^53.
  Number |Number        |Number type with decimals.
  Date   |String        |See [Date & Time Format](#date-time-format).
  Boolean|Boolean       |Flag, `true` or `false`.
  Link   |Object        |See [Links](#links)
  Array  |Array         |List of values. Value type depends on `field.items.type`.
  Object |Object        |Arbitrary Object.


= title_anchor 'h2', "resources-entries", "Entries"

:markdown
  Entries represent textual content in a Space.
  An Entry's data adheres to a certain Content Type.

  For example, let's look at an Entry that fits the [Blog Post Content Type](#resources-content-types):

= language_block :json do
  :plain
    {
      "fields": {
        "title": {
          "en-US": "Hello, World!",
          "de-DE": "Hallo, Welt!"
        },
        "body": {
          "en-US": "Bacon is healthy!",
          "de-DE": "Bacon ist gesund!"
        }
      }
    }

= title_anchor 'h3', "resources-entries-create", "Creating an Entry"

= prefixed_partial 'snippets/entries-create'

= title_anchor 'h3', "resources-entries-list", "Listing Entries"

= prefixed_partial 'snippets/entries-list'

= title_anchor 'h3', "resources-entries-get", "Getting an Entry"

= prefixed_partial 'snippets/entries-get'

= title_anchor 'h3', "resources-entries-update", "Updating an Entry"

= prefixed_partial 'snippets/entries-update'

= title_anchor 'h3', "resources-entries-publish", "Publishing an Entry"

= prefixed_partial 'snippets/entries-publish'

= title_anchor 'h3', "resources-entries-unpublish", "Unpublishing an Entry"

= prefixed_partial 'snippets/entries-unpublish'

= title_anchor 'h3', "resources-entries-archive", "Archiving an Entry"

= prefixed_partial 'snippets/entries-archive'

= title_anchor 'h3', "resources-entries-unarchive", "Unarchiving an Entry"

= prefixed_partial 'snippets/entries-unarchive'

= title_anchor 'h3', "resources-entries-delete", "Deleting an Entry"

= prefixed_partial 'snippets/entries-delete'

= title_anchor 'h3', "resources-entries-fields", "Entry Fields"

:markdown
  Field          |Type          |Description
  ---------------|--------------|--------------------------------------------
  sys            |Sys           |See [system properties](#system-properties).
  sys.contentType|Link          |Link to the Entry's Content Type
  fields         |Object        |Properties according to Content Type

= title_anchor 'h2', "resources-assets", "Assets"

:markdown
  Assets represent files in a Space. An asset can be any kind of file:
  an image, a video, an audio file, a PDF or any other filetype.
  Assets are usually attached to Entries through [Links](#links).

  Assets can optionally be localized by providing separate files for each locale.
  Those Assets which are not localized simply provide a single file under the default locale.

= title_anchor 'h3', "resources-assets-create", "Creating an Asset"

= prefixed_partial 'snippets/assets-create'

= title_anchor 'h3', "resources-assets-list", "Listing Assets"

= prefixed_partial 'snippets/assets-list'

= title_anchor 'h3', "resources-assets-get", "Getting an Asset"

= prefixed_partial 'snippets/assets-get'

= title_anchor 'h3', "resources-assets-update", "Updating an Asset"

= prefixed_partial 'snippets/assets-update'

= title_anchor 'h3', "resources-assets-process-file", "Processing an Asset file"

= prefixed_partial 'snippets/assets-process-file'

= title_anchor 'h3', "resources-assets-publish", "Publishing an Asset"

= prefixed_partial 'snippets/assets-publish'

= title_anchor 'h3', "resources-assets-unpublish", "Unpublishing an Asset"

= prefixed_partial 'snippets/assets-unpublish'

= title_anchor 'h3', "resources-assets-archive", "Archiving an Asset"

= prefixed_partial 'snippets/assets-archive'

= title_anchor 'h3', "resources-assets-unarchive", "Unarchiving an Asset"

= prefixed_partial 'snippets/assets-unarchive'

= title_anchor 'h3', "resources-assets-delete", "Deleting an Asset"

= prefixed_partial 'snippets/assets-delete'

:markdown
  See [Search Parameters](#search) to learn how to search for specific things.

= title_anchor 'h3', "resources-assets-fields", "Asset Fields"

:markdown
  Field                           |Type          |Description
  --------------------------------|--------------|------------------------------------------------
  sys                             |Sys           |See [system properties](#system-properties).
  fields.title                    |Text          |Title of the Asset.
  fields.description              |Text          |Description of the Asset.
  fields.file                     |File          |File(s) of the Asset.
  fields.file.fileName            |Symbol        |Original filename of the file.
  fields.file.contentType         |Symbol        |Content type of the file.
  fields.file.url                 |Symbol        |URL of the file.
  fields.file.details             |Object        |Details of the file, depending on its mime type.
  fields.file.details.size        |Number        |Size (in bytes) of the file.

= title_anchor 'h2', "resources-arrays", "Arrays"

:markdown
  Search results are represented as Arrays.

  Field          |Type          |Description
  ---------------|--------------|--------------------------------------------
  sys            |Sys           |See [system properties](#system-properties).
  total          |Number        |Total number of resources matching the search parameters.
  limit          |Number        |Requested limit parameter.
  skip           |Number        |Requested skip parameter.

- # TODO: document the maximum value for limit?
