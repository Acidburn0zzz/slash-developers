:markdown
  Whenever you are [creating](#resources-content-types-create) or [updating](#resources-content-types-update) a Content Type you can
  add or remove validations to the fields present in the Content Type schema. Validations, specified in the `validations` property a field,
  are included in the payload sent to the server when you create or update a Content Type. Below there's an example of how you can
  add them to a field when creating a Content Type:

= code_examples do
  = language_block :javascript do
    :plain
      space.createContentType({
        sys: {id: 'blog-post'},
        name: 'Blog Post',
        fields: [
          {
            id: 'title',
            name: 'Title',
            type: 'Text', 
            validations: [
              {size: {min: 5}},
              {regexp: {pattern: 'wow|very|such'}}
            ]
          }
        ]
      }).then(log.ok, log.fail);
  = language_block :shell do
    = curl method: 'PUT',
           path:   '/spaces/{space_key}/content_types/blog-post',
           data:   {name: 'Blog Post', fields: [{id: 'title', name: 'Title', type: 'Text', validations: [{size: {min: 5}}, {regexp: {pattern: 'wow|very|such'}}]}]}

:markdown

  The validations you can apply to a field in a Content Type depend on the type of the field. Following is a table which lists the
  available validations per field type:

  Name                                                                              |Field type                            |Description
  ----------------------------------------------------------------------------------|--------------------------------------|------------------------------------------------
  [size](#resources-content-types-size-validation)                                  |Text, Symbol, Array, Object           |Ensures the size of a value is within a range
  [in](#resources-content-types-in-validation)                                      |Text, Symbol, Number, Decimal Number  |Ensures only values in a given a set are accepted
  [regexp](#resouces-content-types-regexp-validation)                               |Text, Symbol                          |Ensures the values matches a regular expression
  [range](#resources-content-types-range-validation)                                |Integer, Decimal Number               |Ensures the value is within a range
  [dateRange](#resources-content-types-date-range-validation)                       |Date                                  |Ensures the value is within a range
  [assetFileSize](#resources-content-types-asset-file-size-validation)              |Asset                                 |Ensures the file size is within a range
  [assetImageDimensions](#resources-content-types-asset-image-dimensions-validation)|Asset                                 |Ensures the image dimensions are within a range

  Please notice that validations will only take effect after the Content Type has been [activated](#resources-content-types-activate) and that
  previously exising entries will not be validated until they are published again.

  #### Adding or updating validations
  To add or update validations to a field, include the desired validations in the `validations` property of the field you want to validate.

  As an example we are going to add two validations to the `title` field of a Content Type. Following is the schema of this Content Type:

= language_block :json do
  :plain
    {
      "name": "Blog Post",
      "description": "Simple blog post with title and body fields.",
      "fields": [
        {
          "id": "title",
          "name": "Title",
          "type": "Text",
        }
      ],
      "sys": {
        "id": "blog-post",
        ...
      }
    }

:markdown
  To add the validations issue a request to the Content Management API including the new version of the schema for this Content Type. This new schema must contain a `validations`
  property for every field we want to validate (`title` on this example).

= code_examples do
  = language_block :javascript do
    :plain
      space.createContentType({
        sys: {id: 'blog-post'},
        name: 'Blog Post',
        fields: [
          {
            id: 'title',
            name: 'Title',
            type: 'Text',
            validations: [
              {size: {min: 5}},
              {regexp: {pattern: 'wow|very|such'}}
            ]
          }
        ]
      }).then(log.ok, log.fail);
  = language_block :shell do
    = curl method: 'PUT',
           path:   '/spaces/{space_key}/content_types/blog-post',
           data:   {name: 'Blog Post', fields: [{id: 'title', name: 'Title', type: 'Text', validations: [{size: {min: 5}}, {regexp: {pattern: 'wow|very|such'}}]}]}

:markdown
  The new schema will now have validations for the `title` field (which you can see below). Remember that this new schema will only take effect after publishing it.

= language_block :json do
  :plain
    {
      "name": "Blog Post",
      "description": "Simple blog post with title and body fields.",
      "fields": [
        {
          "id": "title",
          "name": "Title",
          "type": "Text",
          "validations": [
            {"size": {"min": 5}},
            {"regexp": {"pattern": "wow|very|such"}}
          ]
        }
      ],
      "sys": {
        "id": "blog-post",
        ...
      }
    }

:markdown
  #### Removing validations
  To remove a specific validation, [update the Content Type](#resources-content-type-update) leaving that validation out of the field's `validations` collection. To remove all
  the validations applied to a field update the Content Type schema removing the `validations` property.

  As an example we are going to remove all the validations from the Content Type we used before.

= language_block :json do
  :plain
    {
      "name": "Blog Post",
      "description": "Simple blog post with title and body fields.",
      "fields": [
        {
          "id": "title",
          "name": "Title",
          "type": "Text",
          "validations": [
            {"size": {"min": 5}},
            {"regexp": {"pattern": "wow|very|such"}}
          ]
        }
      ],
      "sys": {
        "id": "blog-post",
        ...
      }
    }

:markdown
  To remove all the validations issue a request to the Content Management API including the new version of the schema for this Content Type but this time without the `validations` property.

= code_examples do
  = language_block :javascript do
    :plain
      space.createContentType({
        sys: {id: 'blog-post'},
        name: 'Blog Post',
        fields: [
          {
            id: 'title',
            name: 'Title',
            type: 'Text',
            validations: [
              {size: {min: 5}},
              {regexp: {pattern: 'wow|very|such'}}
            ]
          }
        ]
      }).then(log.ok, log.fail);
  = language_block :shell do
    = curl method: 'PUT',
           path:   '/spaces/{space_key}/content_types/blog-post',
           data:   {name: 'Blog Post', fields: [{id: 'title', name: 'Title', type: 'Text'}]}

:markdown
  The new schema will now not have validations for the `title` field. Remember that this new schema will only take effect after publishing it.

= title_anchor 'h4', "resources-content-types-size-validation", "Size validation"
:markdown
  Validates that the size of a text, object or array is within a range. It's defined specifying the `min` and the `max` values of
  that range. `min` and `max` values are inclusive. Example:

  ```
    {"size": {"min": 0, "max": 10}}
  ```

  If there's no value for `min` or `max` it's property can be omitted from the validation specification.

= title_anchor 'h4', "resources-content-types-in-validation", "In validation"
:markdown

  Validates that the value of a field belongs to a predefined set. It's defined specifying the elements that form the valid set.
  Example:

  ```
    {"in": [1, 2, 3]}
  ```

= title_anchor 'h4', "resources-content-types-regexp-validation", "Regexp validation"
:markdown

  Validates that the value of a field matches a Regular Expression. It's defined specifying the `pattern` and the `flags`
  that will be used in the Regular Expresion engine (those available for [JavaScript Regular Expressions](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp)). Example:

  ```
    {"regexp": {"pattern": "foo", "flags": "i"}}
  ```

= title_anchor 'h4', "resources-content-types-date-range-validation", "Date Range validation"
:markdown

  Validates that the value of a field is within a range. It's defined specifying the `min` and `max` values of that range. `min` and `max` are inclusive.

  These values have to conform to the [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format. To minimize problems when comparing dates, it's recommended
  to include time zone specifications in the range values . Example:

  ```
    {"dateRange": {"min": "2013-02-08T09:12Z","max": "2015-12-08"}}
  ```

  If there's no value for `min` or `max` it's property can be omitted from the validation specification.

= title_anchor 'h4', "resources-content-types-asset-file-size-validation", "Asset File Size validation"
:markdown

  Validates that the size of an asset is within a range. It's defined specifying the `min` and `max` values of that range. `min` and `max` are
  inclusive. This values will be interpreted as bytes. Example:

  ```
    {"assetFileSize": {"min": 12, "max": 100}}
  ```

  If there's no value for `min` or `max` it's property can be omitted from the validation specification.

= title_anchor 'h4', "resources-content-types-asset-image-dimensions-validation", "Asset Image Dimensions validation"
:markdown

  Validates that the dimensions of an image are within a range. It's defined specified the `min` and `max` values for the `height` and `width` of an image.
  `min` and `max` are inclusive. This values will be interpreted as pixels. Example:

  ```
    {"assetImageDimensions": {"height": {"min": 10, "max": 200}, "width": {"min": 20, "max": 30}}}
  ```

  Values for `height` or `width` can be omitted. If there's no value for `min` or `max` it's property can be omitted from the validation specification.
